
optiboot_lgt8f328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000076aa  0000033e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002aa  00007400  00007400  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  000077fe  000077fe  0000033e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .stab         00000e64  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e28  00000000  00000000  000011a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001fcc  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00007400 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table,
  //   so entry to this function will always be here, indepedent of compilation,
  //   features etc
  asm volatile (
    7400:	01 c0       	rjmp	.+2      	; 0x7404 <main>
    7402:	43 c1       	rjmp	.+646    	; 0x768a <do_spm>

00007404 <main>:
    7404:	1f 92       	push	r1
    7406:	cd b7       	in	r28, 0x3d	; 61
    7408:	de b7       	in	r29, 0x3e	; 62
    740a:	11 24       	eor	r1, r1
    740c:	84 b7       	in	r24, 0x34	; 52
    740e:	14 be       	out	0x34, r1	; 52
    7410:	90 e8       	ldi	r25, 0x80	; 128
    7412:	90 93 f2 00 	sts	0x00F2, r25
    7416:	23 e9       	ldi	r18, 0x93	; 147
    7418:	20 93 f2 00 	sts	0x00F2, r18
    741c:	90 93 61 00 	sts	0x0061, r25
    7420:	21 e0       	ldi	r18, 0x01	; 1
    7422:	20 93 61 00 	sts	0x0061, r18
    7426:	96 bf       	out	0x36, r25	; 54
    7428:	9c e4       	ldi	r25, 0x4C	; 76
    742a:	96 bf       	out	0x36, r25	; 54
    742c:	88 23       	and	r24, r24
    742e:	71 f0       	breq	.+28     	; 0x744c <main+0x48>
    7430:	98 2f       	mov	r25, r24
    7432:	9a 70       	andi	r25, 0x0A	; 10
    7434:	92 30       	cpi	r25, 0x02	; 2
    7436:	51 f0       	breq	.+20     	; 0x744c <main+0x48>
    7438:	81 ff       	sbrs	r24, 1
    743a:	02 c0       	rjmp	.+4      	; 0x7440 <main+0x3c>
    743c:	97 ef       	ldi	r25, 0xF7	; 247
    743e:	94 bf       	out	0x34, r25	; 52
    7440:	28 2e       	mov	r2, r24
    7442:	80 e0       	ldi	r24, 0x00	; 0
    7444:	0d d1       	rcall	.+538    	; 0x7660 <watchdogConfig>
    7446:	e2 e3       	ldi	r30, 0x32	; 50
    7448:	ff 27       	eor	r31, r31
    744a:	09 94       	ijmp
    744c:	85 e0       	ldi	r24, 0x05	; 5
    744e:	80 93 81 00 	sts	0x0081, r24
    7452:	82 e0       	ldi	r24, 0x02	; 2
    7454:	80 93 c0 00 	sts	0x00C0, r24
    7458:	88 e1       	ldi	r24, 0x18	; 24
    745a:	80 93 c1 00 	sts	0x00C1, r24
    745e:	86 e0       	ldi	r24, 0x06	; 6
    7460:	80 93 c2 00 	sts	0x00C2, r24
    7464:	82 e2       	ldi	r24, 0x22	; 34
    7466:	80 93 c4 00 	sts	0x00C4, r24
    746a:	8d e0       	ldi	r24, 0x0D	; 13
    746c:	f9 d0       	rcall	.+498    	; 0x7660 <watchdogConfig>
    746e:	25 9a       	sbi	0x04, 5	; 4
    7470:	26 e0       	ldi	r18, 0x06	; 6
    7472:	80 e3       	ldi	r24, 0x30	; 48
    7474:	9c ef       	ldi	r25, 0xFC	; 252
    7476:	31 e0       	ldi	r19, 0x01	; 1
    7478:	90 93 85 00 	sts	0x0085, r25
    747c:	80 93 84 00 	sts	0x0084, r24
    7480:	36 bb       	out	0x16, r19	; 22
    7482:	b0 9b       	sbis	0x16, 0	; 22
    7484:	fe cf       	rjmp	.-4      	; 0x7482 <main+0x7e>
    7486:	1d 9a       	sbi	0x03, 5	; 3
    7488:	a8 95       	wdr
    748a:	40 91 c0 00 	lds	r20, 0x00C0
    748e:	47 fd       	sbrc	r20, 7
    7490:	02 c0       	rjmp	.+4      	; 0x7496 <main+0x92>
    7492:	21 50       	subi	r18, 0x01	; 1
    7494:	89 f7       	brne	.-30     	; 0x7478 <main+0x74>
    7496:	80 e0       	ldi	r24, 0x00	; 0
    7498:	9a e3       	ldi	r25, 0x3A	; 58
    749a:	c9 2e       	mov	r12, r25
    749c:	63 e0       	ldi	r22, 0x03	; 3
    749e:	d6 2e       	mov	r13, r22
    74a0:	bb 24       	eor	r11, r11
    74a2:	b3 94       	inc	r11
    74a4:	72 e0       	ldi	r23, 0x02	; 2
    74a6:	a7 2e       	mov	r10, r23
    74a8:	e4 ea       	ldi	r30, 0xA4	; 164
    74aa:	9e 2e       	mov	r9, r30
    74ac:	f2 ea       	ldi	r31, 0xA2	; 162
    74ae:	8f 2e       	mov	r8, r31
    74b0:	7c 01       	movw	r14, r24
    74b2:	ca d0       	rcall	.+404    	; 0x7648 <getch>
    74b4:	81 34       	cpi	r24, 0x41	; 65
    74b6:	79 f4       	brne	.+30     	; 0x74d6 <main+0xd2>
    74b8:	c7 d0       	rcall	.+398    	; 0x7648 <getch>
    74ba:	89 83       	std	Y+1, r24	; 0x01
    74bc:	d7 d0       	rcall	.+430    	; 0x766c <verifySpace>
    74be:	89 81       	ldd	r24, Y+1	; 0x01
    74c0:	82 38       	cpi	r24, 0x82	; 130
    74c2:	11 f4       	brne	.+4      	; 0x74c8 <main+0xc4>
    74c4:	81 e0       	ldi	r24, 0x01	; 1
    74c6:	05 c0       	rjmp	.+10     	; 0x74d2 <main+0xce>
    74c8:	81 38       	cpi	r24, 0x81	; 129
    74ca:	11 f4       	brne	.+4      	; 0x74d0 <main+0xcc>
    74cc:	88 e0       	ldi	r24, 0x08	; 8
    74ce:	01 c0       	rjmp	.+2      	; 0x74d2 <main+0xce>
    74d0:	83 e0       	ldi	r24, 0x03	; 3
    74d2:	b3 d0       	rcall	.+358    	; 0x763a <putch>
    74d4:	af c0       	rjmp	.+350    	; 0x7634 <main+0x230>
    74d6:	82 34       	cpi	r24, 0x42	; 66
    74d8:	11 f4       	brne	.+4      	; 0x74de <main+0xda>
    74da:	84 e1       	ldi	r24, 0x14	; 20
    74dc:	03 c0       	rjmp	.+6      	; 0x74e4 <main+0xe0>
    74de:	85 34       	cpi	r24, 0x45	; 69
    74e0:	19 f4       	brne	.+6      	; 0x74e8 <main+0xe4>
    74e2:	85 e0       	ldi	r24, 0x05	; 5
    74e4:	cb d0       	rcall	.+406    	; 0x767c <getNch>
    74e6:	a6 c0       	rjmp	.+332    	; 0x7634 <main+0x230>
    74e8:	85 35       	cpi	r24, 0x55	; 85
    74ea:	39 f4       	brne	.+14     	; 0x74fa <main+0xf6>
    74ec:	ad d0       	rcall	.+346    	; 0x7648 <getch>
    74ee:	48 2e       	mov	r4, r24
    74f0:	ab d0       	rcall	.+342    	; 0x7648 <getch>
    74f2:	58 2e       	mov	r5, r24
    74f4:	44 0c       	add	r4, r4
    74f6:	55 1c       	adc	r5, r5
    74f8:	9c c0       	rjmp	.+312    	; 0x7632 <main+0x22e>
    74fa:	86 35       	cpi	r24, 0x56	; 86
    74fc:	21 f4       	brne	.+8      	; 0x7506 <main+0x102>
    74fe:	84 e0       	ldi	r24, 0x04	; 4
    7500:	bd d0       	rcall	.+378    	; 0x767c <getNch>
    7502:	80 e0       	ldi	r24, 0x00	; 0
    7504:	e6 cf       	rjmp	.-52     	; 0x74d2 <main+0xce>
    7506:	84 36       	cpi	r24, 0x64	; 100
    7508:	09 f0       	breq	.+2      	; 0x750c <main+0x108>
    750a:	5d c0       	rjmp	.+186    	; 0x75c6 <main+0x1c2>
    750c:	9d d0       	rcall	.+314    	; 0x7648 <getch>
    750e:	9c d0       	rcall	.+312    	; 0x7648 <getch>
    7510:	68 2e       	mov	r6, r24
    7512:	9a d0       	rcall	.+308    	; 0x7648 <getch>
    7514:	78 2e       	mov	r7, r24
    7516:	00 e0       	ldi	r16, 0x00	; 0
    7518:	11 e0       	ldi	r17, 0x01	; 1
    751a:	96 d0       	rcall	.+300    	; 0x7648 <getch>
    751c:	f8 01       	movw	r30, r16
    751e:	81 93       	st	Z+, r24
    7520:	8f 01       	movw	r16, r30
    7522:	6e 12       	cpse	r6, r30
    7524:	fa cf       	rjmp	.-12     	; 0x751a <main+0x116>
    7526:	a2 d0       	rcall	.+324    	; 0x766c <verifySpace>
    7528:	41 14       	cp	r4, r1
    752a:	51 04       	cpc	r5, r1
    752c:	c1 f4       	brne	.+48     	; 0x755e <main+0x15a>
    752e:	20 91 02 01 	lds	r18, 0x0102
    7532:	20 93 04 02 	sts	0x0204, r18
    7536:	90 91 03 01 	lds	r25, 0x0103
    753a:	90 93 05 02 	sts	0x0205, r25
    753e:	e0 92 02 01 	sts	0x0102, r14
    7542:	c0 92 03 01 	sts	0x0103, r12
    7546:	80 91 66 01 	lds	r24, 0x0166
    754a:	80 93 06 02 	sts	0x0206, r24
    754e:	80 91 67 01 	lds	r24, 0x0167
    7552:	80 93 07 02 	sts	0x0207, r24
    7556:	20 93 66 01 	sts	0x0166, r18
    755a:	90 93 67 01 	sts	0x0167, r25
    755e:	f5 e4       	ldi	r31, 0x45	; 69
    7560:	7f 12       	cpse	r7, r31
    7562:	01 c0       	rjmp	.+2      	; 0x7566 <main+0x162>
    7564:	ff cf       	rjmp	.-2      	; 0x7564 <main+0x160>
    7566:	f2 01       	movw	r30, r4
    7568:	d0 92 57 00 	sts	0x0057, r13
    756c:	e8 95       	spm
    756e:	07 b6       	in	r0, 0x37	; 55
    7570:	00 fc       	sbrc	r0, 0
    7572:	fd cf       	rjmp	.-6      	; 0x756e <main+0x16a>
    7574:	80 e0       	ldi	r24, 0x00	; 0
    7576:	90 e0       	ldi	r25, 0x00	; 0
    7578:	11 bc       	out	0x21, r1	; 33
    757a:	fc 01       	movw	r30, r24
    757c:	f3 95       	inc	r31
    757e:	20 81       	ld	r18, Z
    7580:	20 bd       	out	0x20, r18	; 32
    7582:	b1 bc       	out	0x21, r11	; 33
    7584:	fc 01       	movw	r30, r24
    7586:	ef 5f       	subi	r30, 0xFF	; 255
    7588:	fe 4f       	sbci	r31, 0xFE	; 254
    758a:	20 81       	ld	r18, Z
    758c:	20 bd       	out	0x20, r18	; 32
    758e:	a1 bc       	out	0x21, r10	; 33
    7590:	fc 01       	movw	r30, r24
    7592:	ee 5f       	subi	r30, 0xFE	; 254
    7594:	fe 4f       	sbci	r31, 0xFE	; 254
    7596:	20 81       	ld	r18, Z
    7598:	20 bd       	out	0x20, r18	; 32
    759a:	d1 bc       	out	0x21, r13	; 33
    759c:	fc 01       	movw	r30, r24
    759e:	ed 5f       	subi	r30, 0xFD	; 253
    75a0:	fe 4f       	sbci	r31, 0xFE	; 254
    75a2:	20 81       	ld	r18, Z
    75a4:	20 bd       	out	0x20, r18	; 32
    75a6:	9c 01       	movw	r18, r24
    75a8:	24 0d       	add	r18, r4
    75aa:	35 1d       	adc	r19, r5
    75ac:	23 2f       	mov	r18, r19
    75ae:	33 27       	eor	r19, r19
    75b0:	22 bd       	out	0x22, r18	; 34
    75b2:	24 2d       	mov	r18, r4
    75b4:	28 0f       	add	r18, r24
    75b6:	21 bd       	out	0x21, r18	; 33
    75b8:	9f ba       	out	0x1f, r9	; 31
    75ba:	8f ba       	out	0x1f, r8	; 31
    75bc:	04 96       	adiw	r24, 0x04	; 4
    75be:	80 38       	cpi	r24, 0x80	; 128
    75c0:	91 05       	cpc	r25, r1
    75c2:	d1 f6       	brne	.-76     	; 0x7578 <main+0x174>
    75c4:	37 c0       	rjmp	.+110    	; 0x7634 <main+0x230>
    75c6:	84 37       	cpi	r24, 0x74	; 116
    75c8:	39 f5       	brne	.+78     	; 0x7618 <main+0x214>
    75ca:	3e d0       	rcall	.+124    	; 0x7648 <getch>
    75cc:	3d d0       	rcall	.+122    	; 0x7648 <getch>
    75ce:	78 2e       	mov	r7, r24
    75d0:	3b d0       	rcall	.+118    	; 0x7648 <getch>
    75d2:	4c d0       	rcall	.+152    	; 0x766c <verifySpace>
    75d4:	82 01       	movw	r16, r4
    75d6:	74 0c       	add	r7, r4
    75d8:	02 30       	cpi	r16, 0x02	; 2
    75da:	11 05       	cpc	r17, r1
    75dc:	19 f4       	brne	.+6      	; 0x75e4 <main+0x1e0>
    75de:	80 91 04 02 	lds	r24, 0x0204
    75e2:	14 c0       	rjmp	.+40     	; 0x760c <main+0x208>
    75e4:	03 30       	cpi	r16, 0x03	; 3
    75e6:	11 05       	cpc	r17, r1
    75e8:	19 f4       	brne	.+6      	; 0x75f0 <main+0x1ec>
    75ea:	80 91 05 02 	lds	r24, 0x0205
    75ee:	0e c0       	rjmp	.+28     	; 0x760c <main+0x208>
    75f0:	06 36       	cpi	r16, 0x66	; 102
    75f2:	11 05       	cpc	r17, r1
    75f4:	19 f4       	brne	.+6      	; 0x75fc <main+0x1f8>
    75f6:	80 91 06 02 	lds	r24, 0x0206
    75fa:	08 c0       	rjmp	.+16     	; 0x760c <main+0x208>
    75fc:	07 36       	cpi	r16, 0x67	; 103
    75fe:	11 05       	cpc	r17, r1
    7600:	19 f4       	brne	.+6      	; 0x7608 <main+0x204>
    7602:	80 91 07 02 	lds	r24, 0x0207
    7606:	02 c0       	rjmp	.+4      	; 0x760c <main+0x208>
    7608:	f8 01       	movw	r30, r16
    760a:	84 91       	lpm	r24, Z
    760c:	16 d0       	rcall	.+44     	; 0x763a <putch>
    760e:	0f 5f       	subi	r16, 0xFF	; 255
    7610:	1f 4f       	sbci	r17, 0xFF	; 255
    7612:	70 12       	cpse	r7, r16
    7614:	e1 cf       	rjmp	.-62     	; 0x75d8 <main+0x1d4>
    7616:	0e c0       	rjmp	.+28     	; 0x7634 <main+0x230>
    7618:	85 37       	cpi	r24, 0x75	; 117
    761a:	39 f4       	brne	.+14     	; 0x762a <main+0x226>
    761c:	27 d0       	rcall	.+78     	; 0x766c <verifySpace>
    761e:	8e e1       	ldi	r24, 0x1E	; 30
    7620:	0c d0       	rcall	.+24     	; 0x763a <putch>
    7622:	85 e9       	ldi	r24, 0x95	; 149
    7624:	0a d0       	rcall	.+20     	; 0x763a <putch>
    7626:	8f e0       	ldi	r24, 0x0F	; 15
    7628:	54 cf       	rjmp	.-344    	; 0x74d2 <main+0xce>
    762a:	81 35       	cpi	r24, 0x51	; 81
    762c:	11 f4       	brne	.+4      	; 0x7632 <main+0x22e>
    762e:	88 e0       	ldi	r24, 0x08	; 8
    7630:	17 d0       	rcall	.+46     	; 0x7660 <watchdogConfig>
    7632:	1c d0       	rcall	.+56     	; 0x766c <verifySpace>
    7634:	80 e1       	ldi	r24, 0x10	; 16
    7636:	01 d0       	rcall	.+2      	; 0x763a <putch>
    7638:	3c cf       	rjmp	.-392    	; 0x74b2 <main+0xae>

0000763a <putch>:
}

void putch(char ch) {
#ifndef SOFT_UART
  #ifndef LIN_UART
    while (!(UART_SRA & _BV(UDRE0))) {  /* Spin */ }
    763a:	90 91 c0 00 	lds	r25, 0x00C0
    763e:	95 ff       	sbrs	r25, 5
    7640:	fc cf       	rjmp	.-8      	; 0x763a <putch>
  #else
    while (!(LINSIR & _BV(LTXOK)))   {  /* Spin */ }
  #endif

  UART_UDR = ch;
    7642:	80 93 c6 00 	sts	0x00C6, r24
    7646:	08 95       	ret

00007648 <getch>:
    :
      "r25"
);
#else
#ifndef LIN_UART
  while(!(UART_SRA & _BV(RXC0)))  {  /* Spin */ }
    7648:	80 91 c0 00 	lds	r24, 0x00C0
    764c:	87 ff       	sbrs	r24, 7
    764e:	fc cf       	rjmp	.-8      	; 0x7648 <getch>
  if (!(UART_SRA & _BV(FE0))) {
    7650:	80 91 c0 00 	lds	r24, 0x00C0
    7654:	84 fd       	sbrc	r24, 4
    7656:	01 c0       	rjmp	.+2      	; 0x765a <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7658:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
    765a:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    765e:	08 95       	ret

00007660 <watchdogConfig>:
}

void watchdogConfig(uint8_t x) {
#ifdef WDCE //does it have a Watchdog Change Enable?
 #ifdef WDTCSR
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7660:	e0 e6       	ldi	r30, 0x60	; 96
    7662:	f0 e0       	ldi	r31, 0x00	; 0
    7664:	98 e1       	ldi	r25, 0x18	; 24
    7666:	90 83       	st	Z, r25
#else //then it must be one of those newfangled ones that use CCP
  CCP=0xD8; //so write this magic number to CCP
#endif 

#ifdef WDTCSR
  WDTCSR = x;
    7668:	80 83       	st	Z, r24
    766a:	08 95       	ret

0000766c <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    766c:	ed df       	rcall	.-38     	; 0x7648 <getch>
    766e:	80 32       	cpi	r24, 0x20	; 32
    7670:	19 f0       	breq	.+6      	; 0x7678 <verifySpace+0xc>
    7672:	88 e0       	ldi	r24, 0x08	; 8
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    7674:	f5 df       	rcall	.-22     	; 0x7660 <watchdogConfig>
    7676:	ff cf       	rjmp	.-2      	; 0x7676 <verifySpace+0xa>
    7678:	84 e1       	ldi	r24, 0x14	; 20
    767a:	df cf       	rjmp	.-66     	; 0x763a <putch>

0000767c <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    767c:	cf 93       	push	r28
    767e:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    7680:	e3 df       	rcall	.-58     	; 0x7648 <getch>
    7682:	c1 50       	subi	r28, 0x01	; 1
    7684:	e9 f7       	brne	.-6      	; 0x7680 <getNch+0x4>
    7686:	cf 91       	pop	r28
  verifySpace();
}
    7688:	f1 cf       	rjmp	.-30     	; 0x766c <verifySpace>

0000768a <do_spm>:
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
    // Do spm stuff
    asm volatile (
    768a:	fc 01       	movw	r30, r24
    768c:	0a 01       	movw	r0, r20
    768e:	67 bf       	out	0x37, r22	; 55
    7690:	e8 95       	spm
    7692:	11 24       	eor	r1, r1
    );

    // wait for spm to complete
    //   it doesn't have much sense for __BOOT_PAGE_FILL,
    //   but it doesn't hurt and saves some bytes on 'if'
    boot_spm_busy_wait();
    7694:	07 b6       	in	r0, 0x37	; 55
    7696:	00 fc       	sbrc	r0, 0
    7698:	fd cf       	rjmp	.-6      	; 0x7694 <do_spm+0xa>
#if defined(RWWSRE)
    // this 'if' condition should be: (command == __BOOT_PAGE_WRITE || command == __BOOT_PAGE_ERASE)...
    // but it's tweaked a little assuming that in every command we are interested in here, there
    // must be also SELFPRGEN set. If we skip checking this bit, we save here 4B
    if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    769a:	66 70       	andi	r22, 0x06	; 6
    769c:	29 f0       	breq	.+10     	; 0x76a8 <do_spm+0x1e>
    769e:	45 2b       	or	r20, r21
    76a0:	19 f4       	brne	.+6      	; 0x76a8 <do_spm+0x1e>
      // Reenable read access to flash
      __boot_rww_enable_short();
    76a2:	81 e1       	ldi	r24, 0x11	; 17
    76a4:	87 bf       	out	0x37, r24	; 55
    76a6:	e8 95       	spm
    76a8:	08 95       	ret
